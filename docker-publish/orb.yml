version: 2.1

description: |
  Build and publish Docker images to container registries

executors:
  docker:
    description: The docker container to use when running docker-publish builds
    docker:
      - image: circleci/python:3.6

commands:
  check:
    description: |
      Sanity check to make sure you can build a docker image.

        * check that $DOCKER_LOGIN and $DOCKER_PASSWORD environment variables are set
        * run docker login to ensure that you can push the built image
    parameters:
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
    steps:
      - run:
          name: Check Environment Variables
          command: |
            if [[ -z "${DOCKER_LOGIN}" ]]; then
              echo "DOCKER_LOGIN is not set, will not be able to push image."
              exit 1
            fi

            if [[ -z "${DOCKER_PASSWORD}" ]]; then
              echo "DOCKER_PASSWORD is not set, will not be able to push image."
              exit 1
            fi
      - run:
          name: Docker Login
          command: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD << parameters.registry >>
  build:
    description: Builds and Tags a Docker Image.
    parameters:
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile.
        type: string
        default: ""
      path:
        description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
        type: string
        default: .
      image:
        description: Name of image to create. Defaults to a combination of $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
      extra-build-args:
        description: Extra arguments passed to 'docker build' command. Useful for providing '--build-arg' values.
        type: string
        default: ""
    steps:
      - run:
          name: Build Docker Image
          command: |
            docker build \
              <<# parameters.extra-build-args >><< parameters.extra-build-args >><</ parameters.extra-build-args >> \
              <<# parameters.dockerfile >> -f << parameters.dockerfile >><</ parameters.dockerfile >> \
              -t << parameters.registry >>/<< parameters.image >>:<< parameters.tag >> \
              << parameters.path >>
            docker tag << parameters.registry >>/<< parameters.image >>:<< parameters.tag >> << parameters.registry >>/<< parameters.image >>:latest
            docker tag << parameters.registry >>/<< parameters.image >>:<< parameters.tag >> << parameters.image >>:<< parameters.tag >>
            docker tag << parameters.registry >>/<< parameters.image >>:<< parameters.tag >> << parameters.image >>:latest
            echo "export DOCKER_CONTAINER_TAGGED='<< parameters.registry >>/<< parameters.image >>:<< parameters.tag >>'" >> $BASH_ENV
            echo "export DOCKER_CONTAINER_LOCAL='<< parameters.image >>:<< parameters.tag >>'" >> $BASH_ENV
            echo "Tagged << parameters.registry >>/<< parameters.image >>:<< parameters.tag >> (available as DOCKER_CONTAINER_TAGGED)"
            echo "Tagged << parameters.registry >>/<< parameters.image >>:latest"
            echo "Tagged << parameters.image >>:<< parameters.tag >> (available as env DOCKER_CONTAINER_LOCAL)"
            echo "Tagged << parameters.image >>:latest"
            source $BASH_ENV
  deploy:
    description: Deploy docker image to a registry.
    parameters:
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
      image:
        description: Name of image to create. Defaults to a combination of $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME.
        type: string
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_SHA1.
        type: string
    steps:
      - run:
          name: Push Docker Image
          command: |
            if [[ $CIRCLE_NODE_INDEX == 0 ]]; then
              docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>
              echo "Pushed << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>"
            fi

  source-env:
    description: Source environment from the specified file.
    parameters:
      env-file:
        description: An env file to source. The content of this file will be added to $BASH_ENV
        type: string
    steps:
      - run:
          name: Sourcing << parameters.env-file >>
          command: |
            cat "<< parameters.env-file >>" >> $BASH_ENV
            source $BASH_ENV

jobs:
  publish:
    description: Check, Build, and Deploy a Docker Image.
    executor: docker
    parameters:
      checkout:
        description: Boolean flag indicating whether to perform checkout or not
        type: boolean
        default: true
      attach-workspace:
        description: |
          Boolean for whether or not to attach to an existing workspace.
          This is normally used if you want to upload artefacts produced by another job to the release.
        type: boolean
        default: false
      workspace-root:
        description: |
          Workspace root path that is either an absolute path or a path relative
          to the working directory. Defaults to '.' (the working directory)
        type: string
        default: '.'
      source-env-file:
        description: An env file to source. The content of this file will be added to $BASH_ENV
        type: string
        default: ""
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile.
        type: string
        default: Dockerfile
      path:
        description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
        type: string
        default: .
      image:
        description: Name of image to create. Defaults to a combination of $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $DOCKER_LOGIN/$CIRCLE_PROJECT_REPONAME
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
      extra-build-args:
        description: Extra arguments passed to `docker build` command. Useful for providing `--build-arg` values.
        type: string
        default: ""
      after-checkout:
        description: Optional steps to run after checking out the code.
        type: steps
        default: []
      before-build:
        description: Optional steps to run before building the docker image.
        type: steps
        default: []
      after-build:
        description: Optional steps to run after building the docker image.
        type: steps
        default: []
      after-publish:
        description: Optional steps to run after publishing the docker image
        type: steps
        default: []
    steps:
      - when:
          condition: << parameters.checkout >>
          steps:
            - checkout
      - when:
          name: Attach workspace
          condition: << parameters.attach-workspace >>
          steps:
            - attach_workspace:
                at: << parameters.workspace-root >>
      - when:
          name: Sourcing environment
          condition: << parameters.source-env-file >>
          steps:
            - source-env:
                env-file: << parameters.source-env-file >>
      - when:
          name: Run after-checkout lifecycle hook steps.
          condition: << parameters.after-checkout >>
          steps: << parameters.after-checkout >>
      - setup_remote_docker
      - check:
          registry: << parameters.registry >>
      - when:
          name: Run before-build lifecycle hook steps.
          condition: << parameters.before-build >>
          steps: << parameters.before-build >>
      - build:
          dockerfile: << parameters.dockerfile >>
          path: << parameters.path >>
          image: << parameters.image >>
          tag: << parameters.tag >>
          registry: << parameters.registry >>
          extra-build-args: << parameters.extra-build-args >>
      - when:
          name: Run after-build lifecycle hook steps.
          condition: << parameters.after-build >>
          steps: << parameters.after-build >>
      - deploy:
          registry: << parameters.registry >>
          image: << parameters.image >>
          tag: << parameters.tag >>
      - when:
          name: Run after-publish lifecycle hook steps
          condition: << parameters.after-publish >>
          steps: << parameters.after-publish >>

examples:
  standard_build_and_push:
    description: |
      A standard docker workflow, where you are building an image with a
      Dockerfile in the root of your repository, naming the image to be the
      same name as your repository, and then pushing to the default docker
      registry (at docker.io).

    usage:
      version: 2.1

      orbs:
        docker: haskell-works/docker-publish@1.0.0

      workflows:
        build_and_publish_docker_image:
          jobs:
            - docker-publish/publish

  custom_name_and_tag:
    description: Build and Deploy docker image with a custom name and tag.
    usage:
      version: 2.1

      orbs:
        docker: circleci/docker-publish@1.0.0

      workflows:
        build_and_publish_docker_image:
          jobs:
            - docker-publish/publish:
                image: my/image
                tag: my_tag

  custom_registry_and_dockerfile:
    description: |
      Build and Deploy docker image with a non standard Dockerfile and to a
      custom registry.
    usage:
      version: 2.1

      orbs:
        docker: circleci/docker-publish@1.0.0

      workflows:
        build_and_publish_docker_image:
          jobs:
            - docker-publish/publish:
                registry: my.docker.registry
                dockerfile: path/to/MyDockerFile

  life_cycle_hooks:
    description: |
      Build and deploy a docker image with custom lifecycle hooks; before
      checking out the code from the VCS repository, before building the
      docker image, and after building the docker image.
    usage:
      version: 2.1

      orbs:
        docker: circleci/docker-publish@1.0.0

      workflows:
        docker_with_lifecycle:
          jobs:
            - docker-publish/publish:
                after-checkout:
                  - run:
                      name: Do this after checkout.
                      command: echo "Did this after checkout"
                before-build:
                  - run:
                      name: Do this before the build.
                      command: echo "Did this before the build"
                after-build:
                  - run:
                      name: Do this after the build.
                      command: echo "Did this after the build"
