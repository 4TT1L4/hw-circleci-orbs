version: 2.1

description: Automates releases to Hackage

executors:
  default:
    docker:
      - image: quay.io/haskell_works/ghc-8.6.5:latest

commands:
  upload:
    description: Uploads package to Hackage
    parameters:
      server:
        description: Hackage server
        type: string
      username:
        description: Hackage username
        type: string
      password:
        description: Hackage password
        type: string
      publish:
        description: Publish the release. Without this flag a candidate will be created.
        type: boolean
        default: false
      workspace-name:
        description: |
          Workspace name is a name of the workspace folder.
          Defaults to 'build' to match 'haskell-build' default settings.
        type: string
        default: 'build'
    steps:
      - prepare-release
      - run:
          name: Publishing on Hackage
          command: |
            for PACKAGE_TARBALL in $(find ./build/sdist/ -name "*.tar.gz"); do
              PACKAGE_NAME=$(basename ${PACKAGE_TARBALL%.*.*})

              if [ -z "<<# parameters.publish >>true<</ parameters.publish >>" ];
                then
                  TARGET_URL="<< parameters.server >>/packages/candidates";
                  DOCS_URL="<< parameters.server >>/package/$PACKAGE_NAME/candidate/docs"
                else
                  TARGET_URL="<< parameters.server >>/packages/upload";
                  DOCS_URL="<< parameters.server >>/package/$PACKAGE_NAME/docs"
              fi


              HACKAGE_STATUS=$(curl --silent --head -w %{http_code} -XGET --anyauth --user << parameters.username >>:<< parameters.password >> << parameters.server >>/package/$PACKAGE_NAME -o /dev/null)
              if [ "$HACKAGE_STATUS" = "404" ]; then

                echo "Uploading $PACKAGE_NAME to $TARGET_URL"

                curl -X POST -f --user << parameters.username >>:<< parameters.password >> $TARGET_URL -F "package=@$PACKAGE_TARBALL"
                echo "Uploaded $PACKAGE_NAME"

                DOC_FILE_NAME="/tmp/workspace/<< parameters.workspace-name >>/dist/doc/$PACKAGE_NAME-docs.tar.gz"
                if [ -f "$DOC_FILE_NAME" ]; then
                  echo "Uploading documentation for $PACKAGE_NAME to $DOCS_URL/$PACKAGE_NAME/docs"
                  curl -X PUT \
                    -H 'Content-Type: application/x-tar' \
                    -H 'Content-Encoding: gzip' \
                    -u << parameters.username >>:<< parameters.password >> \
                    --data-binary "@$DOC_FILE_NAME" \
                    "$DOCS_URL"
                else
                  echo "Not uploading documentation for $PACKAGE_NAME: $DOC_FILE_NAME is not found."
                fi

              else
                echo "Package $PACKAGE_NAME" already exists on Hackage.
              fi
            done

  prepare-release:
    description:
      Prepares a release. Creates a tarball, checks if the release is needed,
      and sets PACKAGE_TARBALL and PACKAGE_NAME env variables.
    steps:
      - run:
          name: Preparing the release
          command: |
              PROJECT_DIR=$PWD
              mkdir -p $PROJECT_DIR/build/sdist
              for i in $(git ls-files | grep '\.cabal'); do
                cd $PROJECT_DIR && cd `dirname $i`
                cabal check && cabal v2-sdist -o $PROJECT_DIR/build/sdist
              done;

jobs:
  upload:
    description: Uploads package to Hackage
    parameters:
      executor:
        type: executor
        default: default
      server:
        description: Hackage server
        type: string
        default: ${HACKAGE_SERVER:-http://hackage.haskell.org}
      username:
        description: Hackage username
        type: string
        default: ${HACKAGE_USER}
      password:
        description: Hackage password
        type: string
        default: ${HACKAGE_PASS}
      publish:
        description: Publish the release. Without this flag a candidate will be created.
        type: boolean
        default: false
      attach-workspace:
        description: |
          Boolean for whether or not to attach to an existing workspace.
          This is normally used if you want to upload artefacts produced by another job to the release.
        type: boolean
        default: false
      workspace-name:
        description: |
          Workspace name is a name of the workspace folder.
          Defaults to 'build' to match 'haskell-build' default settings.
        type: string
        default: 'build'
      after-checkout:
        description: Optional steps to execute after checking out code
        type: steps
        default: []
      after-upload:
        description: Optional steps to execute after uploading is done
        type: steps
        default: []
    executor: << parameters.executor >>
    steps:
      - checkout
      - when:
          name: Attach workspace
          condition: << parameters.attach-workspace >>
          steps:
            - attach_workspace:
                at: /tmp/workspace
      - when:
          condition: << parameters.after-checkout >>
          steps: << parameters.after-checkout >>
      - upload:
          server: << parameters.server >>
          username: << parameters.username >>
          password: << parameters.password >>
          publish: << parameters.publish >>
          workspace-name: << parameters.workspace-name >>
      - when:
          condidion: << parameters.after-upload >>
          steps: << parameters.after-upload >>
